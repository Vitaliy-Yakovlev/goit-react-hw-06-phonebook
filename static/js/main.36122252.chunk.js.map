{"version":3,"sources":["components/Filter/Filter.module.css","components/Container/Container.module.css","components/Heading/Heading.module.css","components/Form/Form.module.css","components/Form/Form.js","components/Contacts/Contacts.js","components/Filter/Filter.js","components/Heading/Heading.js","components/Container/Container.js","components/Hooks/useLocalStorage.js","App.js","index.js","components/Contacts/Contacts.module.css"],"names":["module","exports","Form","onSubmit","useState","name","setName","number","setNumber","handleInputChange","event","currentTarget","value","reset","className","s","form","preventDefault","label","input","onChange","type","pattern","title","required","btn","Contacts","contacts","onClick","list","map","id","item","Filter","onChangeFilter","Heading","text","Container","children","container","useLocalStorage","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","Phonebook","setContacts","filter","setFilter","contact","shortid","generate","toLowerCase","length","toast","error","autoClose","normalizedFilter","includes","filterContact","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36122252.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1hmdT\",\"input\":\"Filter_input__3QeL9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__23PN0\",\"title\":\"Container_title__3zxQs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Heading_title__Q_IXu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Form_label__3z4nc\",\"input\":\"Form_input__2I661\",\"btn\":\"Form_btn__263F2\"};","import React, { useState } from 'react';\nimport s from './Form.module.css';\n\nexport default function Form({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    onSubmit({ name, number });\n\n    reset();\n  };\n\n  const reset = () => {\n    setNumber('');\n    setName('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          value={name}\n          onChange={handleInputChange}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n        <label className={s.label}>\n          Number\n          <input\n            className={s.input}\n            value={number}\n            onChange={handleInputChange}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button className={s.btn} type=\"submit\">\n          Add contact\n        </button>\n      </label>\n    </form>\n  );\n}\n\n// class Form extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleInputChange = e => {\n//     const { name, value } = e.currentTarget;\n\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onSubmit(this.state);\n\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <form className={s.form} onSubmit={this.handleSubmit}>\n//         <label className={s.label}>\n//           Name\n//           <input\n//             className={s.input}\n//             value={name}\n//             onChange={this.handleInputChange}\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//           />\n//           <label className={s.label}>\n//             Number\n//             <input\n//               className={s.input}\n//               value={number}\n//               onChange={this.handleInputChange}\n//               type=\"tel\"\n//               name=\"number\"\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//               required\n//             />\n//           </label>\n//           <button className={s.btn} type=\"submit\">\n//             Add contact\n//           </button>\n//         </label>\n//       </form>\n//     );\n//   }\n// }\n\n// export default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Contacts.module.css';\n\nconst Contacts = ({ contacts, onClick }) => {\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ name, id, number }) => {\n        return (\n          <li className={s.item} key={id}>\n            {name}: {number}\n            <button className={s.btn} type=\"button\" onClick={() => onClick(id)}>\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nContacts.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Contacts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChangeFilter }) => {\n  return (\n    <label className={s.label}>\n      Find contact by name\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={onChangeFilter}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Heading.module.css';\n\nconst Heading = ({ text }) => <h2 className={s.title}>{text}</h2>;\n\nHeading.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Heading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Container.module.css';\n\nconst Container = ({ children }) => (\n  <>\n    <h1 className={s.title}>React. Home Work - Phonebook</h1>\n    <div className={s.container}>{children}</div>\n  </>\n);\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, defaultValue) => {\n  const [state, setState] = useState(\n    () => JSON.parse(window.localStorage.getItem(key)) ?? defaultValue,\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nexport default useLocalStorage;\n","import React, { useState } from 'react';\nimport shortid from 'shortid';\nimport Form from './components/Form';\nimport Contacts from './components/Contacts';\nimport Filter from './components/Filter';\nimport Heading from './components/Heading';\nimport Container from './components/Container';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport useLocalStorage from './components/Hooks';\n\nexport default function Phonebook() {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [filter, setFilter] = useState('');\n\n  const addContact = ({ name, number }) => {\n    const contact = {\n      name,\n      id: shortid.generate(),\n      number,\n    };\n\n    const errorName = contacts.filter(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (errorName.length) {\n      toast.error(`${name} is already in contacts`);\n    } else {\n      setContacts([contact, ...contacts]);\n    }\n  };\n\n  const filterChange = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const filterContact = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  return (\n    <>\n      <Container>\n        <Heading text=\"Phonebook\" />\n        <Form onSubmit={addContact} />\n        <ToastContainer autoClose={5000} />\n        <Heading text=\"Contacts\" />\n        <Filter value={filter} onChangeFilter={filterChange} />\n        <Contacts contacts={filterContact()} onClick={deleteContact} />\n      </Container>\n    </>\n  );\n}\n\n// class Phonebook extends Component {\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     // console.log('App componentDidMount');\n\n//     const contacts = localStorage.getItem('contacts');\n//     const passedContacts = JSON.parse(contacts);\n\n//     if (passedContacts) {\n//       this.setState({ contacts: passedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     // console.log('App componentDidUpdate');\n\n//     const nextContacts = this.state.contacts;\n//     const prevContacts = prevState.contacts;\n\n//     if (nextContacts !== prevContacts) {\n//       // console.log('Обновилось поле contacts, записываю contacts в хранилище');\n//       localStorage.setItem('contacts', JSON.stringify(nextContacts));\n//     }\n//   }\n\n//   addContact = ({ name, number }) => {\n//     const contact = {\n//       name,\n//       id: shortid.generate(),\n//       number,\n//     };\n\n//     const errorName = this.state.contacts.filter(\n//       contact => contact.name.toLowerCase() === name.toLowerCase(),\n//     );\n\n//     if (errorName.length) {\n//       toast.error(`${name} is already in contacts`);\n//       // alert(`${name} is already in contacts`);\n//     } else {\n//       this.setState(({ contacts }) => ({\n//         contacts: [contact, ...contacts],\n//       }));\n//     }\n//   };\n\n//   resetInput = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   filterChange = e => {\n//     this.setState({ filter: e.currentTarget.value });\n//   };\n\n//   filterContact = () => {\n//     const { contacts, filter } = this.state;\n\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(({ contacts }) => ({\n//       contacts: contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   render() {\n//     const { filter } = this.state;\n\n//     return (\n//       <>\n//         <Container>\n//           <Heading text=\"Phonebook\" />\n\n//           <Form onSubmit={this.addContact} />\n//           <ToastContainer autoClose={5000} />\n\n//           <Heading text=\"Contacts\" />\n\n//           <Filter value={filter} onChangeFilter={this.filterChange} />\n\n//           <Contacts\n//             contacts={this.filterContact()}\n//             onClick={this.deleteContact}\n//           />\n//         </Container>\n//       </>\n//     );\n//   }\n// }\n\n// export default Phonebook;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contacts_list__i6YM7\",\"item\":\"Contacts_item__1GJe9\",\"btn\":\"Contacts_btn__1801i\"};"],"sourceRoot":""}